[상속]
부모의 코드를 
자식이 그대로 사용함 

[특징/장점]
1. 재사용성 증가
(한 번 작성한 부모 코드를 자식들이 재사용)

2. 유지 보수성 증가
(부모 코드만 수정하면 자식은 그대로 있어도 됨)

3. 공통적인 규약 정의
(물려 받은 자식들의 형태가 부모와 비슷함)
-> 부모 코드 수정, 추가, 제거 시
   자식도 일괄 변경

[상속 키워드] : extends (확장하다)
-> 자식의 크기가 커지기때문에 확장하다는 

[상속 주의사항] 
- 상속 받은 자식도 직접 접근 불가능

[상속 메모리 구조]
- 자식 객체 생성시 
  부모 객체가 같이 생성되어 
  자식 객체 내부에 배치됨

[오버라이딩]
- 상속 관계에서 부모의 메서드를 자식이 용도에 맞게 재정의 하는 것 


[오버라이딩, 오버로딩의 차이]
오버라이딩 (Overriding, 덮어쓰기/ 재정의)
- 상속 관계에서 부모의 메서드를 자식이 용도에 맞게 재정의 하는것 

오버로딩(Overloading, 과적)
- 하나의 클래스에 같은 이름의 메서드를 여러개 작성하는 기술
- 비슷한 기능을 제공하는 메서드들을 하나의 이름으로 관리

* 오버로딩 vs 오버라이딩 
(차이점)
같은 클래스에 작성 / 하위(자식) 클래스에 작성 
매개 변수(개수, 순서, 타입) 하나라도 다름 / 매개 변수 동일 
반환형 관계 없음 / 반환형 동일 
접근 제어자 관계 없음 / 접근 제어가 같거나 넓은 범위
예외처리 관계 없음 / 예외처리 같거나 좁은 범위

(공통점) : 메서드 이름이 동일해야 한다 

[final 예약어]
- final class : 상속 불가 클래스
- final method : 오버라이딩 불가 메서드 
- final variable : 값 대입 불가 변수(상수) 

* 자바에서 클래스간의 상속은 단일 상속만 지원!!



* 객체 지향 프로그래밍 
- 현실은 객체와 객체의 상호 작용으로 
  사건이  발생한다는 개념을 컴퓨터로 옮겨놓은 것

- 객체는 속성 / 기능으로 이루어짐

class : 객체의 속성과 기능을 정의한 것 (문서, 설계도)

instance : class에 작성된 내용을 토대로
	   메모리에 생성된 객체
